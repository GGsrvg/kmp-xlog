// Kotlin DSL only supports syntax shortcut for plugin inside plugins block,
// but plugins block doesn't support `if` syntax, so we have to stay on groovy.

plugins {
  id "org.jetbrains.kotlin.multiplatform"

  id "convention.publication"
}

def hostOs = System.getProperty("os.name")
def isMacOS = hostOs == "Mac OS X"
def isWindows = hostOs.startsWith("Windows")
def isLinux = hostOs == "Linux"

if (isMacOS) {
  apply plugin: "com.android.library"
  apply plugin: "org.jetbrains.kotlin.native.cocoapods"
}

kotlin {
  if (isMacOS) {
    android() {
      publishLibraryVariants("release", "debug")
    }

    [iosArm64(), iosSimulatorArm64(), iosX64()].forEach { t ->
      t.compilations.main.cinterops {
        xlog {
          defFile "src/iosMain/cinterop/xlog.def"
          includeDirs {
            allHeaders "${project.projectDir}/src/iosMain/objc"
          }
        }
      }
    }

    cocoapods {
      summary = "KMP wrapper for tencent mars xlog"
      homepage = "https://github.com/HackWebRTC/kmp-xlog"
      version = Consts.releaseVersion
      ios.deploymentTarget = Consts.iosDeploymentTarget

      license = "{ :type => 'MIT', :file => 'LICENSE'}"
      source = "{ :http => '$homepage/releases/download/v$version/kmp_xlog.xcframework.zip' }"
      authors = "Piasy Xu"

      extraSpecAttributes["libraries"] = "'z'"
      extraSpecAttributes["framework"] = "'SystemConfiguration'"
      framework {
        baseName = "kmp_xlog"
        isStatic = true
        embedBitcode("disable")
      }
    }

    js(IR) {
      browser {
      }
      binaries.executable()
    }
  }

  if (isLinux) {
    linuxX64 {
      compilations.main {
        cinterops {
          xlog {
            defFile "src/cppCommon/cinterop/xlog.def"
            includeDirs {
              allHeaders "${project.projectDir}/src/cppCommon/cpp"
            }
          }
        }

        kotlinOptions.freeCompilerArgs += [
            "-include-binary",
            "${project.projectDir}/src/linuxMain/libs/x64/libkmp_xlog.a".toString()
        ]
      }
    }
  }

  if (isWindows) {
    mingwX64 {
      compilations.main {
        cinterops {
          zlib {
            defFile "src/cppCommon/cinterop/zlib.def"
            extraOpts(
              "-Xsource-compiler-option", "-xc",
              "-Xsource-compiler-option", "-I${rootProject.projectDir}/mars/mars/zstd/lib",
              "-Xsource-compiler-option", "-I${rootProject.projectDir}/mars/mars/zstd/lib/common",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/zlib/adler32.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/zlib/compress.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/zlib/crc32.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/zlib/deflate.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/zlib/gzclose.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/zlib/gzlib.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/zlib/gzread.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/zlib/gzwrite.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/zlib/infback.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/zlib/inffast.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/zlib/inflate.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/zlib/inftrees.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/zlib/trees.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/zlib/uncompr.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/zlib/zutil.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/common/debug.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/common/entropy_common.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/common/fse_decompress.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/common/error_private.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/common/pool.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/common/threading.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/common/xxhash.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/common/zstd_common.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/compress/fse_compress.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/compress/hist.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/compress/huf_compress.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/compress/zstd_compress_literals.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/compress/zstd_compress_sequences.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/compress/zstd_compress.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/compress/zstd_double_fast.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/compress/zstd_fast.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/compress/zstd_lazy.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/compress/zstd_ldm.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/compress/zstd_opt.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/compress/zstdmt_compress.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/decompress/huf_decompress.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/decompress/zstd_ddict.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/decompress/zstd_decompress_block.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/decompress/zstd_decompress.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/deprecated/zbuff_common.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/dictBuilder/cover.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/dictBuilder/divsufsort.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/dictBuilder/fastcover.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/zstd/lib/dictBuilder/zdict.c",
            )
          }
          xlog {
            defFile "src/cppCommon/cinterop/xlog.def"
            includeDirs {
              allHeaders "${project.projectDir}/src/cppCommon/cpp"
            }
            extraOpts(
              "-Xsource-compiler-option", "-I${rootProject.projectDir}/mars",
              "-Xsource-compiler-option", "-I${rootProject.projectDir}/mars/mars",
              "-Xsource-compiler-option", "-I${rootProject.projectDir}/mars/mars/comm",
              "-Xsource-compiler-option", "-I${rootProject.projectDir}/mars/mars/comm/xlogger",
              "-Xsource-compiler-option", "-I${rootProject.projectDir}/mars/mars/log",
              "-Xsource-compiler-option", "-I${rootProject.projectDir}/mars/mars/zstd/lib",
              "-Xsource-compiler-option", "-I${rootProject.projectDir}/mars/mars/zstd/lib/common",
              "-Xsource-compiler-option", "-DBOOST_NO_EXCEPTIONS",
              "-Xsource-compiler-option", "-DBOOST_USE_WINDOWS_H",
              "-Xsource-compiler-option", "-DXLOG_NO_CRYPT",
              "-Xsource-compiler-option", "-DKMP_XLOG_WINDOWS=1",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/boost/libs/filesystem/src/codecvt_error_category.cpp",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/boost/libs/filesystem/src/operations.cpp",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/boost/libs/filesystem/src/path.cpp",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/boost/libs/filesystem/src/path_traits.cpp",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/boost/libs/filesystem/src/utf8_codecvt_facet.cpp",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/boost/libs/filesystem/src/windows_file_codecvt.cpp",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/boost/libs/iostreams/src/mapped_file.cpp",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/boost/libs/system/src/error_code.cpp",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/boost/libs/thread/src/win32/thread.cpp",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/assert/__assert.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/win32/platform_comm.cpp",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/windows/xlogger_threadinfo.cpp",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/xlogger/loginfo_extract.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/xlogger/xloggerbase.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/xlogger/xlogger.cc",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/autobuffer.cc",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/mmap_util.cc",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/ptrbuffer.cc",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/strutil.cc",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/tickcount.cc",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/comm/time_utils.c",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/log/crypt/log_crypt.cc",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/log/src/appender.cc",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/log/src/formater.cc",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/log/src/log_base_buffer.cc",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/log/src/log_zlib_buffer.cc",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/log/src/log_zstd_buffer.cc",
              "-Xcompile-source", "${rootProject.projectDir}/mars/mars/log/src/xlogger_interface.cc",
              "-Xcompile-source", "src/cppCommon/cpp/MarsXLog.cpp",
            )
          }
        }
      }
    }
  }

  sourceSets {
    if (isMacOS) {
      commonTest {
        dependencies {
          implementation(kotlin("test")) // This brings all the platform dependencies automatically
          implementation(Testing.mockK.common)
        }
      }

      androidTest {
        dependencies {
          implementation(Testing.mockK)
        }
      }

      iosMain {
        dependsOn(commonMain)
      }
      iosArm64Main.dependsOn(iosMain)
      iosSimulatorArm64Main.dependsOn(iosMain)
      iosX64Main.dependsOn(iosMain)

      jsMain {
        dependencies {
          implementation(kotlin("stdlib-js"))
        }
      }
    }

    if (isLinux || isWindows) {
      cppCommon.dependsOn(commonMain)

      if (isLinux) {
        linuxX64Main.dependsOn(cppCommon)
      }
      if (isWindows) {
        mingwX64Main.dependsOn(cppCommon)
      }
    }
  }
}

if (isMacOS) {
  android {
    compileSdk = Consts.androidCompileSdk
    ndkVersion = Consts.androidNdk
    namespace = Consts.androidNS

    defaultConfig {
      minSdk = Consts.androidMinSdk
      targetSdk = Consts.androidTargetSdk

      sourceSets["main"].java.srcDir("src/androidMain/java")
      sourceSets["main"].jniLibs.srcDir("src/androidMain/jniLibs")
    }

    compileOptions {
      sourceCompatibility = JavaVersion.VERSION_11
      targetCompatibility = JavaVersion.VERSION_11
    }
  }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
  kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}
